Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
phat = pnorm(betahat[1] + betahat[2]*y)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
Iinv
sqrt(Iinv)
sqrt(Iinv[1,1])
phat = pnorm(betahat[1] + betahat[2]*y)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
phat = pnorm(etahat)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
p31 = pnorm(betahat[1] + betahat[2]*31)
p31
ci = (left, right)
ci = cbind(left, right)
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
left = pnorm(betahat[1] + betahat[2]*31 - qnorm(0.975) * sqrt(si2))[1]
right = pnorm(betahat[1] + betahat[2]*31 + qnorm(0.975) * sqrt(si2))[1]
ci = cbind(left, right)
ci
phat = pnorm(betahat[1] + y*betahat[2])
I11 = sum(6*phat*(1 - phat))
I12 = sum(6*y*phat*(1 - phat))
I22 = sum(6*y^2*phat*(1 - phat))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
left = pnorm(betahat[1] + betahat[2]*31 - qnorm(0.975) * sqrt(si2))[1]
right = pnorm(betahat[1] + betahat[2]*31 + qnorm(0.975) * sqrt(si2))[1]
ci = cbind(left, right)
ci
betahat
phat = pnorm(betahat[1] + y*betahat[2])
I11 = sum(6*phat*(1 - phat))
I12 = sum(6*y*phat*(1 - phat))
I22 = sum(6*y^2*phat*(1 - phat))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
ci
phat = pnorm(X %*% betahat)
I11 = sum(6*phat*(1 - phat))
I12 = sum(6*y*phat*(1 - phat))
I22 = sum(6*y^2*phat*(1 - phat))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - 2*sqrt(si2)
eta_r = etahat + 2*sqrt(si2)
c(pnorm(eta_l), pnorm(eta_r))
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - 2*sqrt(si2)
eta_r = etahat + 2*sqrt(si2)
c(pnorm(eta_l), pnorm(eta_r))
phat = pnorm(betahat[1] + y*betahat[2])
I11 = sum(6*phat*(1 - phat))
I12 = sum(6*y*phat*(1 - phat))
I22 = sum(6*y^2*phat*(1 - phat))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - 2*sqrt(si2)
eta_r = etahat + 2*sqrt(si2)
c(pnorm(eta_l), pnorm(eta_r))
# Using method from Challenger.pdf;
ilogit (betahat[1] + betahat[2]*29)
library(faraway)
data(orings)
# ========== (a) =========
# Get data;
X <- cbind(1, orings$temp)
y <- orings$damage
# Get log likelihood;
logL = function(beta, orings) {
# Define p for probit;
eta = X %*% beta
p = pnorm(eta)
return( sum( y*log(p) + (6 - y)*log(1 - p) ) )
}
# Find MLE using optim function;
betahat = optim(c(10, -.1), logL, orings=orings, control=list(fnscale=-1))$par
betahat
# ========== (b) =========
# ========== (c) =========
# Likelihood ratio test for the significance of the temperature coefficient;
# Maximum log likelihood for full model;
MaxlogL.F = logL(betahat,orings)
MaxlogL.F
# Maximum log likelihood for reduced model
n = rep(6, length(y))
phatN = sum(y)/sum(n)
MaxlogL.R = sum(y)*log(phatN) + sum(6 - y)*log(1 - phatN)
# Test statistic and p-value;
LR = -2*(MaxlogL.R - MaxlogL.F)
LR
pstat = pchisq(LR, df=1,lower=FALSE)
pstat
# ========== (d) =========
# Compute an estimate of the probability of damage when the temperature equals 31 Fahrenheit;
# Using method from Challenger.pdf;
ilogit (betahat[1] + betahat[2]*29)
pnorm (betahat[1] + betahat[2]*31)
pnorm (betahat[1] + betahat[2]*31)
phat = pnorm(betahat[1] + y*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
X
# Fit logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
lines(x, ilogit(betalogit[1] + betalogit[2]*x), col="blue")
lines(x, pnorm(betahat[1] + betahat[2]*seq(25,85,1)), col="red", lty=2
x <- seq(25,85,1)
# Fit logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
lines(x, ilogit(betalogit[1] + betalogit[2]*x), col="blue")
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red", lty=2)
x <- seq(25,85,1)
# Fit logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
lines(x, ilogit(betalogit[1] + betalogit[2]*x), col="blue")
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red", lty=2)
Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
lines(x, ilogit(logit[1] + logit[2]*x), col="blue")
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red", lty=2)
# Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x <- seq(25,85,1)
# Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
# Logit line;
lines(X, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(X, pnorm(betahat[1] + betahat[2]*x), col="red")
x <- seq(10,100,1)
# Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
y
X
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x <- seq(xlim[0],xlim[1],1)
# Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="red")
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x = seq(xlim[0],xlim[1],1)
# Fit logit model;
logit = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)$coefficients
# Logit line;
lines(len, ilogit(logit[1] + logit[2]*x), col="blue")
# Probit line;
lines(len, pnorm(betahat[1] + betahat[2]*x), col="red")
# ========== (e) =========
# Draw plot;
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x = seq(xlim[0],xlim[1],1)
# Get logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)
logit = logit_model$coefficients
# Logit line;
lines(len, ilogit(logit[1] + logit[2]*x), col="red")
# Probit line;
lines(len, pnorm(betahat[1] + betahat[2]*x), col="blue")
# ========== (e) =========
# Draw plot;
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x = seq(xlim[0],xlim[1],1)
# Get logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)
logit = logit_model$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="red")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="blue")
x = seq(25,85)
# ========== (e) =========
# Draw plot;
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
x = seq(25,85)
# Get logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)
logit = logit_model$coefficients
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="red")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="blue")
# ========== (e) =========
# Draw plot;
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim=c(0,1),
xlab="Temperature", ylab="Prob of damage")
# Get logit model;
logit_model = glm(cbind(damage,6-damage) ~ temp, family=binomial, orings)
logit = logit_model$coefficients
x = seq(25,85)
# Logit line;
lines(x, ilogit(logit[1] + logit[2]*x), col="red")
# Probit line;
lines(x, pnorm(betahat[1] + betahat[2]*x), col="blue")
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
si2 <- matrix(c(1, 29), 1, 2) %*% Iinv %*% matrix(c(1, 29), 2, 1)
etahat = betahat[1] + betahat[2]*29
eta_l = etahat - 2*sqrt(si2)
eta_r = etahat + 2*sqrt(si2)
etahat
# Maximum log likelihood for full model;
MaxlogL.F = logL(betahat,orings)
c(eta_l, eta_r)
pnorm(etahat)
c(pnorm(eta_l), pnorm(eta_r))
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
# Compute CI using se from Hessian matrix;
si2 <- matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - qnorm(0.975)*sqrt(si2)
eta_r = etahat + qnorm(0.975)*sqrt(si2)
etahat
# Get
c(pnorm(eta_l), pnorm(eta_r))
library(faraway)
missing <- with(pima, missing <- glucose==0 | diastolic==0 | triceps==0 | bmi == 0)
pima_subset = pima[!missing, c(6,9)]
str(pima_subset)
# ========== (a) ==========
# Binomial regression model;
model = glm(cbind(test, 1-test)~., family=binomial, pima_subset)
summary(model)
# Get point estimate;
est = coef(model)[2] * 7
est
# ========== (b) ==========
# With point estimate from (a),
# 95% CI is obtained by:
se = (qnorm(0.975) * 0.01528) * 7
ci = c(est-se, est+se)
ci
# ========== (b) =========
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
sqrt(Iinv[1,1])
# Compute CI using se from Hessian matrix;
si2 <- matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - qnorm(0.975)*sqrt(si2)
eta_r = etahat + qnorm(0.975)*sqrt(si2)
etahat
# Get CI;
c(pnorm(eta_l), pnorm(eta_r))
# Predict p at temp 31;
pnorm(betahat[1] + betahat[2]*31)
si2
sqrt(si2)
# Predict p at temp 31;
pnorm(betahat[1] + betahat[2]*31)
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# Compute CI using se from Hessian matrix;
si2 <- matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - qnorm(0.975)*sqrt(si2)
eta_r = etahat + qnorm(0.975)*sqrt(si2)
etahat
# Get CI;
c(pnorm(eta_l), pnorm(eta_r))
# Predict p at temp 31;
pnorm(betahat[1] + betahat[2]*31)
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
(si_1 <- sqrt(Iinv[1,1]))
# Compute CI using se from Hessian matrix;
(si_2 <- sqrt(Iinv[2,2]))
# Compute CI using se from Hessian matrix;
c(betahat[1] - 1.96*si_1, betahat[1] + 1.96*si_1)
c(betahat[2] - 1.96*si_2, betahat[2] + 1.96*si_2)
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
(si_1 <- sqrt(Iinv[1,1]))
(si_2 <- sqrt(Iinv[2,2]))
# CI for paramater 1;
c(betahat[1] - qnorm(0.975)*si_1, betahat[1] + qnorm(0.975)*si_1)
# CI for parameter 2;
c(betahat[2] - qnorm(0.975)*si_2, betahat[2] + qnorm(0.975)*si_2)
phat <- pnorm(betahat[1] + orings$temp*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*orings$temp*phat*(1 - phat))
I22 <- sum(6*orings$temp^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# CI for paramaters;
se1 = qnorm(0.975) * sqrt(Iinv[1,1])
se2 = qnorm(0.975) * sqrt(Iinv[2,2])
c(betahat[1] - se1, betahat[1] + se1)
c(betahat[2] - se2, betahat[2] + se2)
phat <- ilogit(betahat[1] + y*betahat[2])
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*y*phat*(1 - phat))
I22 <- sum(6*y^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# CI for parameters;
se1 = qnorm(0.975) * sqrt(Iinv[1,1])
se2 = qnorm(0.975) * sqrt(Iinv[2,2])
c(betahat[1] - se1, betahat[1] + se1)
c(betahat[2] - se2, betahat[2] + se2)
etahat = X %*% betahat
phat <- ilogit(etahat)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*y*phat*(1 - phat))
I22 <- sum(6*y^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# CI for parameters;
se1 = qnorm(0.975) * sqrt(Iinv[1,1])
se2 = qnorm(0.975) * sqrt(Iinv[2,2])
c(betahat[1] - se1, betahat[1] + se1)
c(betahat[2] - se2, betahat[2] + se2)
etahat = X %*% betahat
phat <- pnorm(etahat)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*y*phat*(1 - phat))
I22 <- sum(6*y^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# CI for parameters;
se1 = qnorm(0.975) * sqrt(Iinv[1,1])
se2 = qnorm(0.975) * sqrt(Iinv[2,2])
c(betahat[1] - se1, betahat[1] + se1)
c(betahat[2] - se2, betahat[2] + se2)
# ========== (b) =========
etahat = X %*% betahat
phat <- pnorm(etahat)
I11 <- sum(6*phat*(1 - phat))
I12 <- sum(6*y*phat*(1 - phat))
I22 <- sum(6*y^2*phat*(1 - phat))
Iinv <- solve(matrix(c(I11, I12, I12, I22), 2, 2))
# CI for parameters;
se1 = qnorm(0.975) * sqrt(Iinv[1,1])
se2 = qnorm(0.975) * sqrt(Iinv[2,2])
ci1 = c(betahat[1] - se1, betahat[1] + se1)
ci2 = c(betahat[2] - se2, betahat[2] + se2)
ci1
ci2
# ========== (d) =========
# Compute an estimate of the probability of damage when the temperature equals 31 Fahrenheit;
# Predict p at temp 31;
pnorm(betahat[1] + betahat[2]*31)
# Using Iinv functions from (b),
phat = pnorm(betahat[1] + y*betahat[2])
I11 = sum(6*phat*(1 - phat))
I12 = sum(6*orings$temp*phat*(1 - phat))
I22 = sum(6*orings$temp^2*phat*(1 - phat))
Iinv = solve(matrix(c(I11, I12, I12, I22), 2, 2))
si2 = matrix(c(1, 31), 1, 2) %*% Iinv %*% matrix(c(1, 31), 2, 1)
etahat = betahat[1] + betahat[2]*31
eta_l = etahat - qnorm(0.975)*sqrt(si2)
eta_r = etahat + qnorm(0.975)*sqrt(si2)
etahat
# Get CI;
c(pnorm(eta_l), pnorm(eta_r))
step <- 1/(norm(TC %*% t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for (k in 1:(x1*x2)) {
A <- Ao+step*(t(TC) %*% (X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax(replicate(nsrcs, 0), abs(A)-thr))
for (i in 1:10) {
Ao <- A
A <- Ao+step * (t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax(replicate(nsrcs, 0), abs(A)-thr))
}
Alr[,k] <- A
}
nsrcs = 6
N = 240
V = 441
SM_SIZE = 21
x1 = 21
x2 = 21
step <- 1/(norm(TC %*% t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for (k in 1:(x1*x2)) {
A <- Ao+step*(t(TC) %*% (X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax(replicate(nsrcs, 0), abs(A)-thr))
for (i in 1:10) {
Ao <- A
A <- Ao+step * (t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax(replicate(nsrcs, 0), abs(A)-thr))
}
Alr[,k] <- A
}
getwd()
setwd()
setwd(F:\Git_Works\Python\Works\MAST30034_AppliedDataScience\Projects\Assignment 1\repo\mast30034_assignment_1\code)
setwd("F:\Git_Works\Python\Works\MAST30034_AppliedDataScience\Projects\Assignment 1\repo\mast30034_assignment_1\code")
setwd("F:/Git_Works/Python/Works/MAST30034_AppliedDataScience/Projects/Assignment 1/repo/mast30034_assignment_1/code")
getwd()
getwd
tc <- read.table(file ="TC.txt", header=FALSE)
TC
TC <- read.table(file ="TC.txt", header=FALSE)
TC
[U,V,W]=svds(TC, 6)
library(MASS)
[U,V,W]=svds(TC, 6)
svds(TC, 6)
library(MASS)
svds(TC, 6)
install.packages("MASS")
library(Matrix)
svds(TC, 6)
library(RSpectra)
install.packages("RSpectra")
library(RSpectra)
TC <- read.table(file ="TC.txt", header=FALSE)
TC
svds(TC, 6)
TC.values
TC.value
TC = matrix(tc)
tc <- read.table(file ="TC.txt", header=FALSE)
TC = matrix(tc)
svds(TC, 6)
TC
TC = matrix(tc, 6, 240)
svds(TC, 6)
TC
TC
library(MASS)
tc <- read.table(file ="TC.txt", header=FALSE)
TC = as.matrix(tc, 6, 240)
TC
[U, V, W] = svds(TC, 5)
U, V, W = svds(TC, 5)
[U, V, W]= svd(TC, 5)
svd (X, 5 )
svd (TC, 6 )
svd (TC, 6)$u
library(MASS)
tc <- read.table(file ="TC.txt", header=FALSE)
TC = as.matrix(tc, 6, 240)
svd = svd (TC, 6)
d = svd$d
u = svd$u
v = svd$v
d
u
v
# Save outputs;
write.matrix(d,'eigen_values.txt',sep = "\t")
write.matrix(u,'Z.txt',sep = "\t")
write.matrix(v,'W.txt',sep = "\t")
